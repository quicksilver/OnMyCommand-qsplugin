//**************************************************************************************// Filename:	CMUtilsSendAE.cp//				Part of Contextual Menu Workshop by Abracode Inc.//				http://free.abracode.com/cmworkshop///// Copyright © 2002-2003 Abracode, Inc.  All rights reserved.//// Description:	static utilities for Contextual Menu Plugins//////**************************************************************************************#include "CMUtils.h"#include "StAEDesc.h"#include "DebugSettings.h"/*pascal BooleanAEIdleProc(	EventRecord*	inMacEvent,	SInt32*			outSleepTime,	RgnHandle*		outMouseRgn){	*outSleepTime = 6;	*outMouseRgn = nil;	EventTimeout theTimeout = kEventDurationSecond;	::RunCurrentEventLoop(theTimeout);	return false;}*/OSErrCMUtils::SendAppleEventToRunningApplication( FourCharCode appSig, AEEventClass theAEEventClass,											AEEventID theAEEventID, const AEDesc &directObjectDesc, Boolean waitForReply /*=false*/ ){	return CMUtils::SendAEWithObjToRunningApp( appSig, theAEEventClass, theAEEventID, keyDirectObject, directObjectDesc, waitForReply);}OSErrCMUtils::SendAEWithObjToRunningApp( FourCharCode appSig, AEEventClass theAEEventClass, AEEventID theAEEventID,										AEKeyword keyOne, const AEDesc &objOne, Boolean waitForReply /*=false*/  ){	AEDesc emptyDesc;		return CMUtils::SendAEWithThreeObjToRunningApp( appSig, theAEEventClass, theAEEventID, 													keyOne, objOne, 0, emptyDesc, 0, emptyDesc, waitForReply);}OSErrCMUtils::SendAEWithTwoObjToRunningApp( FourCharCode appSig, AEEventClass theAEEventClass, AEEventID theAEEventID,										AEKeyword keyOne, const AEDesc &objOne,										AEKeyword keyTwo, const AEDesc &objTwo, Boolean waitForReply /*=false*/  ){	AEDesc emptyDesc;		return CMUtils::SendAEWithThreeObjToRunningApp( appSig, theAEEventClass, theAEEventID, 													keyOne, objOne, keyTwo, objTwo, 0, emptyDesc, waitForReply);}OSErrCMUtils::SendAEWithThreeObjToRunningApp( FourCharCode appSig, AEEventClass theAEEventClass, AEEventID theAEEventID,										AEKeyword keyOne, const AEDesc &objOne,										AEKeyword keyTwo, const AEDesc &objTwo,										AEKeyword keyThree, const AEDesc &objThree, Boolean waitForReply /*=false*/  ){	OSErr theErr = noErr;	StAEDesc appAddress;	theErr = ::AECreateDesc(typeApplSignature, &appSig, sizeof(FourCharCode), appAddress);	if(theErr == noErr)	{		StAEDesc appleEvent;		theErr = ::AECreateAppleEvent(theAEEventClass, theAEEventID,									appAddress,									kAutoGenerateReturnID,									kAnyTransactionID,									appleEvent);		if(theErr == noErr)		{			if(keyOne != 0)//if key is zero we understand that caller does not want to put an object			{				theErr = ::AEPutKeyDesc( appleEvent, keyOne, &objOne);			}						if(theErr != noErr)			{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToRunningApp. AEPutKeyDesc (keyOne) failed" );				return theErr;			}			if(keyTwo != 0)//if key is zero we understand that caller does not want to put an object			{				theErr = ::AEPutKeyDesc( appleEvent, keyTwo, &objTwo);			}						if(theErr != noErr)			{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToRunningApp. AEPutKeyDesc (keyTwo) failed" );				return theErr;			}			if(keyThree != 0)//if key is zero we understand that caller does not want to put an object			{				theErr = ::AEPutKeyDesc( appleEvent, keyThree, &objThree);			}						if(theErr != noErr)			{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToRunningApp. AEPutKeyDesc (keyTwo) failed" );				return theErr;			}					AESendMode theMode = kAENoReply;					AEIdleUPP theUpp = NULL;										if(waitForReply)					{						theMode = kAEWaitReply;						//theUpp = NewAEIdleUPP(AEIdleProc);					}										StAEDesc theAEReply;					theErr = ::AESend( appleEvent, theAEReply, theMode,							kAENormalPriority, kAEDefaultTimeout, theUpp, NULL);									if(theUpp != NULL)					{						::DisposeAEIdleUPP(theUpp);					}					if(theErr == connectionInvalid)					{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToRunningApp. Application is not running" );			}			else if(theErr != noErr)			{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToRunningApp. AESend failed" );			}		}		else		{			DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToRunningApp. AECreateAppleEvent failed" );		}	}	else	{		DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToRunningApp. Application address not found" );	}		return theErr;}OSErrCMUtils::SendAppleEventToSelf(AEEventClass theAEEventClass, AEEventID theAEEventID, const AEDesc &directObjectDesc){	return CMUtils::SendAppleEventWithObjToSelf( theAEEventClass, theAEEventID, keyDirectObject, directObjectDesc );}OSErrCMUtils::SendAppleEventWithObjToSelf(AEEventClass theAEEventClass, AEEventID theAEEventID,									AEKeyword keyOne, const AEDesc &objOne){	AEDesc emptyDesc;		return CMUtils::SendAEWithThreeObjToSelf(theAEEventClass, theAEEventID, keyOne, objOne, 0, emptyDesc, 0, emptyDesc);}OSErrCMUtils::SendAEWithTwoObjToSelf(AEEventClass theAEEventClass, AEEventID theAEEventID,									AEKeyword keyOne, const AEDesc &objOne,									AEKeyword keyTwo, const AEDesc &objTwo){	AEDesc emptyDesc;		return CMUtils::SendAEWithThreeObjToSelf(theAEEventClass, theAEEventID, keyOne, objOne, keyTwo, objTwo, 0, emptyDesc);}OSErrCMUtils::SendAEWithThreeObjToSelf(AEEventClass theAEEventClass, AEEventID theAEEventID,									AEKeyword keyOne, const AEDesc &objOne,									AEKeyword keyTwo, const AEDesc &objTwo,									AEKeyword keyThree, const AEDesc &objThree){	OSErr theErr = noErr;	StAEDesc appAddress;	ProcessSerialNumber	processNum = { 0, kCurrentProcess };	theErr = ::AECreateDesc(typeProcessSerialNumber, &processNum,								sizeof(ProcessSerialNumber), appAddress);	if(theErr == noErr)	{		StAEDesc appleEvent;		theErr = ::AECreateAppleEvent(theAEEventClass, theAEEventID,									appAddress,									kAutoGenerateReturnID,									kAnyTransactionID,									appleEvent);		if(theErr == noErr)		{			if(keyOne != 0)//if key is zero we understand that caller does not want to put an object			{				theErr = ::AEPutKeyDesc( appleEvent, keyOne, &objOne);			}						if(theErr != noErr)			{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToSelf. AEPutKeyDesc (keyOne) failed" );				return theErr;			}						if(keyTwo != 0)//if key is zero we understand that caller does not want to put an object			{				theErr = ::AEPutKeyDesc( appleEvent, keyTwo, &objTwo);			}			if(theErr != noErr)			{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToSelf. AEPutKeyDesc (keyTwo) failed" );				return theErr;			}						if(keyThree != 0)//if key is zero we understand that caller does not want to put an object			{				theErr = ::AEPutKeyDesc( appleEvent, keyThree, &objThree);			}			if(theErr != noErr)			{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToSelf. AEPutKeyDesc (keyThree) failed" );				return theErr;			}						AESendMode theMode = kAEWaitReply;			StAEDesc theAEReply;			theErr = ::AESend( appleEvent, theAEReply, theMode,					kAENormalPriority, kAEDefaultTimeout, NULL, NULL);								if( (theErr == connectionInvalid) || (theErr == procNotFound) )			{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToSelf. Application is not running" );							}			else if(theErr != noErr)			{				DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToSelf. AESend failed" );#if _DEBUG_				{					Str255 hexString;					ByteCount destLen = sizeof(Str255);					CMUtils::BufToHex( (const unsigned char *)&theErr, (char *)hexString, sizeof(theErr), destLen );					::CopyCStringToPascal( (char *)hexString, hexString);					DEBUG_STR( "\p\tError code is: " );					DEBUG_STR(hexString);				}#endif //_DEBUG_			}		}		else		{			DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToSelf. AECreateAppleEvent failed" );		}	}	else	{		DEBUG_STR( "\pCMUtils::SendAEWithThreeObjToSelf. Application address not found" );	}		return theErr;}OSErrCMUtils::SendAppleEventWithObjToSelfWithReply(AEEventClass theAEEventClass, AEEventID theAEEventID,									AEDesc &outReply,									AEKeyword keyOne, const AEDesc &objOne){	OSErr theErr = noErr;	StAEDesc appAddress;	ProcessSerialNumber	processNum = { 0, kCurrentProcess };	theErr = ::AECreateDesc(typeProcessSerialNumber, &processNum,								sizeof(ProcessSerialNumber), appAddress);	if(theErr == noErr)	{		StAEDesc appleEvent;		theErr = ::AECreateAppleEvent(theAEEventClass, theAEEventID,									appAddress,									kAutoGenerateReturnID,									kAnyTransactionID,									appleEvent);		if(theErr == noErr)		{			if(keyOne != 0)//if key is zero we understand that caller does not want to put an object			{				theErr = ::AEPutKeyDesc( appleEvent, keyOne, &objOne);			}						if(theErr == noErr)			{				AESendMode theMode = kAEWaitReply;				theErr = ::AESend( appleEvent, &outReply, theMode,						kAENormalPriority, kAEDefaultTimeout, NULL, NULL);											if( (theErr == connectionInvalid) || (theErr == procNotFound) )				{					DEBUG_STR( "\pCMUtils::SendAppleEventWithObjToSelf. Application is not running" );									}				else if(theErr != noErr)				{					DEBUG_STR( "\pCMUtils::SendAppleEventWithObjToSelf. AESend failed" );#if _DEBUG_					{						Str255 hexString;						ByteCount destLen = sizeof(Str255);						CMUtils::BufToHex( (const unsigned char *)&theErr, (char *)hexString, sizeof(theErr), destLen );						::CopyCStringToPascal( (char *)hexString, hexString);						DEBUG_STR( "\p\tError code is: " );						DEBUG_STR(hexString);					}#endif //_DEBUG_				}			}			else			{				DEBUG_STR( "\pCMUtils::SendAppleEventWithObjToSelf. AEPutKeyDesc failed" );			}		}		else		{			DEBUG_STR( "\pCMUtils::SendAppleEventWithObjToSelf. AECreateAppleEvent failed" );		}	}	else	{		DEBUG_STR( "\pCMUtils::SendAppleEventWithObjToSelf. Application address not found" );	}		return theErr;}